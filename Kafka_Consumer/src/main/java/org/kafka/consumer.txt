
[] Creating Kafka Consumer in Java:

    There are following steps taken to create a consumer:

    1. Create Logger
    2. Create consumer properties.
    3. Create a consumer.
    4. Subscribe the consumer to a specific topic.
    5. Poll for some new data

[] Creating Logger:

    The logger is implemented to write log messages during the program execution. The user needs to create a Logger
    object which will require to import 'org.slf4j class'.

[] Creating Consumer Properties:

    The required properties of a consumer, such as:

   () key.deserializer: It is a Deserializer class for the key, which is used to implement the 'org.apache.kafka.common.
      serialization.Deserializer' interface.

   () value.deserializer: A Deserializer class for value which implements the 'org.apache.kafka.common.serialization.
      Deserializer' interface.

   () bootstrap.servers: It is a list of host/port pairs which is used to establish an initial connection with the Kafka
      cluster. It does not contain a full set of servers that a client requires. Only the servers which are required for
      bootstrapping are required.

   () group.id: It is a unique string which identifies the consumer of a consumer group. This property is needed when a
      consumer uses either Kafka based offset management strategy or group management functionality via subscribing to a
      topic.

   () auto.offset.reset: This property is required when no initial offset is present or if the current offset does not
      exist anymore on the server. There are the following values used to reset the offset values:

   () earliest: This offset variable automatically reset the value to its earliest offset.

   () latest: This offset variable reset the offset value to its latest offset.

   () none: If no previous offset is found for the previous group, it throws an exception to the consumer.

   () anything else: It throws an exception to the consumer.

   {} Note: In our code, we have used 'earliest' variable to reset the value to its earliest.

[] Subscribing the consumer:

    To read the message from a topic, we need to connect the consumer to the specified topic. A consumer can be
    subscribed through various subscribe API's. Here, we have used Arrays.asList() because may be the user wants to
    subscribe either to one or multiple topics. Therefore, Arrays.asList() allows to subscribe the consumer to multiple
    topics.